{
    "contents" : "\nsource(\"hw1_hw2_source.R\")\n\nnum_pts = 10\n# Setting up the runs and the algorithm\n\nfor (i in 1:1000){\n  generated = data.generate(n=num_pts)\n  \n  # Use linear regression to find w\n  new_mat = as.matrix(cbind(x0=1, generated$data[,1:2]))  \n  mat_inv = solve((t(new_mat) %*% new_mat)) %*% t(new_mat)\n  w = mat_inv %*% generated$data[,3] # Weights initialized\n  \n  #w <- c(0,0,0)\n  \n  # Back to PLA\n  input  <-  as.matrix(cbind(1, generated$data[c(1,2)])) # creating the input matrix\n  res <- apply(input,1,function(x) t(w)%*%x)  # multiplying transpose of w with each row of input matrix \n  \n  k <- 1  # initializing the iterations\n  \n  while (any(sign(res)!=generated$data$y))    # as long as the sign of all elements of res vector differ from the true \n  {                                           # output y, we perform the PLA algorithm below\n    #cat(\"Iteration:\", k, \"\\n\")\n    mis <- which(sign(res)!=generated$data$y)  # getting the points for which hypotesis is wrong\n    ifelse (length(mis)==1, n <- mis, n <- sample(which(sign(res)!=generated$data$y),1))  # randomly sample one of these points\n    w <- w + generated$data$y[n]*input[n,]  # apply PLA, get new weights\n    res <- apply(input,1,function(x) t(w)%*%x)  # use new weights to get the new res vector\n    k <- k+1  # increase the iteration count\n  }\n  cat (\"Number of iterations to converge: \", k, \"\\n\")\n  iterations[i] <- k-1 # store the number of iterations needed in each run\n}\n\n# Main results: average of iterations required to converge\nmean(iterations)\n\n",
    "created" : 1413141248108.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "761414053",
    "id" : "E36AEE0A",
    "lastKnownWriteTime" : 1413143779,
    "path" : "~/Documents/study/edX/cs1156x/rsolutions/hw2_q7.R",
    "project_path" : "hw2_q7.R",
    "properties" : {
        "tempName" : "Untitled3"
    },
    "source_on_save" : false,
    "type" : "r_source"
}
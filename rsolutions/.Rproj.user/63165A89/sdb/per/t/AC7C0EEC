{
    "contents" : "\nsource(\"hw1_hw2_source.R\")\n\nnum_pts = 1000\nnum_iterations = 1000\n\nfinal_result = 0\nw = 0\ne_in = 0\ne_out = 0\n\nresult_matrix = 0\n\ngenerated = data.generate(n=num_pts)\n\nfor (i in 1:num_iterations) {\n  \n  new_mat = as.matrix(cbind(x0=1, generated$data[,1:2]))  \n  f_y = sign(new_mat[,2]**2 + new_mat[,3]**2 - 0.6) # Uses custom f(x) per Q8\n  noise_indices = sample(num_pts, 0.10*num_pts)\n  f_y[noise_indices] = f_y[noise_indices]*-1\n  \n  trans_mat = as.matrix(cbind(x0 = 1, x1 = new_mat[,2], x2 = new_mat[,3], \n                              x1x2 = new_mat[,2]*new_mat[,3], x1sq = new_mat[,2]**2, \n                              x2sq = new_mat[,3]**2))\n  \n  mat_inv = solve((t(trans_mat) %*% trans_mat)) %*% t(trans_mat)\n  w_new = mat_inv %*% f_y\n  \n  w = w + w_new\n  \n  h_y = as.vector(sign(t(w_new) %*% t(trans_mat))) \n     \n  e_in = e_in + sum(f_y != h_y) / num_pts\n  \n  # Generate new data\n  generated2 = data.generate(n=num_pts)\n  new_mat = as.matrix(cbind(x0=1, generated2$data[,1:2]))  \n  f_y = sign(new_mat[,2]**2 + new_mat[,3]**2 - 0.6) # Uses custom f(x) per Q8\n  noise_indices = sample(num_pts, round(0.10*num_pts))\n  f_y[noise_indices] = f_y[noise_indices]*-1\n  \n  trans_mat2 = as.matrix(cbind(x0 = 1, x1 = new_mat[,2], x2 = new_mat[,3], \n                              x1x2 = new_mat[,2]*new_mat[,3], x1sq = new_mat[,2]**2, \n                              x2sq = new_mat[,3]**2))\n  \n  h_y = as.vector(sign(t(w_new) %*% t(trans_mat2))) \n  \n  dt = data.table(trans_mat2)\n  opt_a = sign(-1 - 0.05 * dt$x1 + 0.08 * dt$x2 + 0.13 * dt$x1x2 + 1.5 * dt$x1sq + 1.5 * dt$x2sq)\n  opt_b = sign(-1 - 0.05 * dt$x1 + 0.08 * dt$x2 + 0.13 * dt$x1x2 + 1.5 * dt$x1sq + 15 * dt$x2sq)\n  opt_c = sign(-1 - 0.05 * dt$x1 + 0.08 * dt$x2 + 0.13 * dt$x1x2 + 15 * dt$x1sq + 1.5 * dt$x2sq)\n  opt_d = sign(-1 - 1.5 * dt$x1 + 0.08 * dt$x2 + 0.13 * dt$x1x2 + 0.05 * dt$x1sq + 0.05 * dt$x2sq)\n  opt_e = sign(-1 - 0.05 * dt$x1 + 0.08 * dt$x2 + 1.5 * dt$x1x2 + 0.15 * dt$x1sq + 0.15 * dt$x2sq)\n  \n  option_matrix = rbind(opt_a, opt_b, opt_c, opt_d, opt_e)\n  \n  h_y_matrix = matrix(rep(h_y,5), nrow=5, ncol=num_pts, byrow=T)\n  option_matrix_tf = option_matrix == h_y_matrix\n  result_matrix = apply(option_matrix_tf, 1, function(x) sum(x)/num_pts)\n  \n  final_result = final_result + result_matrix\n  \n  e_out = e_out + sum(f_y != h_y) / num_pts\n  \n}\n\nfinal_result/num_iterations\nw/num_iterations\ne_in/num_iterations\ne_out/num_iterations\n\nprint (\"Option a has ~ 95% agreement with hypothesis\")",
    "created" : 1413154123300.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "580615839",
    "id" : "AC7C0EEC",
    "lastKnownWriteTime" : 1413164196,
    "path" : "~/Documents/study/edX/cs1156x/rsolutions/hw2_q9-10.R",
    "project_path" : "hw2_q9-10.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}